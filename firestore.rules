
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    match /users/{userId} {
      // Allow users to read their own data, and admins/partners to read any user data
      allow read: if request.auth != null && (
                    request.auth.uid == userId ||
                    get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'partner']
                  );

      // Allow users to create their own user document (e.g., on first login)
      // Ensure the document ID (userId) matches the authenticated user's UID
      // and the 'uid' field within the document also matches.
      allow create: if request.auth != null && request.auth.uid == userId && request.resource.data.uid == request.auth.uid;

      // Allow users to update their own profile,
      // and allow admins/partners to update any user profile.
      allow update: if request.auth != null && (
                    request.auth.uid == userId ||
                    get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'partner']
                  );
      // Delete operations on user documents are generally restricted from client-side for safety.
      // Consider implementing this via a Firebase Function if needed.
      allow delete: if false;
    }

    match /events/{eventId} {
      // Any authenticated user can read events
      allow read: if request.auth != null;

      // Any authenticated user can create events
      // (This might be further restricted based on role if needed in the future)
      allow create: if request.auth != null;

      // Only the event creator or an admin/partner can update or delete an event
      allow update, delete: if request.auth != null && (
                                resource.data.created_by == request.auth.uid ||
                                get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'partner']
                              );
    }
  }
}
