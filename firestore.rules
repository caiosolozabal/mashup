rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // It's often better to get role from the token if using custom claims,
    // but for Firestore-only roles, this is a common pattern.
    // Ensure this path is correct and doesn't cause excessive reads if used in many rules.
    function getUserRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    function isAdmin() {
      return isSignedIn() && getUserRole() == 'admin';
    }

    function isPartner() {
      return isSignedIn() && getUserRole() == 'partner';
    }

    function isDJ() {
      return isSignedIn() && getUserRole() == 'dj';
    }

    match /users/{userId} {
      allow read: if isSignedIn() && (isOwner(userId) || isAdmin() || isPartner());
      allow create: if isSignedIn(); // For initial profile creation
      allow update: if isSignedIn() && (isOwner(userId) || isAdmin() || isPartner());
      // Delete should be handled carefully, perhaps by admins or via soft delete
    }

    match /events/{eventId} {
      // Individual document reads
      allow read: if isSignedIn() && (isAdmin() || isPartner() || (isDJ() && resource.data.dj_id == request.auth.uid));
      // For queries: Firestore security rules are not filters.
      // The client MUST build queries that only request data the user is allowed to see.
      // e.g., a DJ querying events MUST include where('dj_id', '==', request.auth.uid)
      // This rule allows such a filtered query to succeed for a DJ.
      // Admins/Partners can query without the dj_id filter.
      allow list: if isSignedIn() && (isAdmin() || isPartner() || isDJ()); // DJ needs this to query their own events.

      allow create: if isSignedIn() && (isAdmin() || isPartner() || isDJ());
      allow update: if isSignedIn() && (isAdmin() || isPartner() || (isDJ() && resource.data.dj_id == request.auth.uid));
      allow delete: if isSignedIn() && (isAdmin() || isPartner());
    }

    match /agency_accounts/{accountId} {
      allow read, write: if isSignedIn() && (isAdmin() || isPartner());
    }
  }
}
